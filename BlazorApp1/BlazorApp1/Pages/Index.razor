@inject HttpClient Http
@page "/"
<style>
    
</style>

<div class="search-container">
    <h1>Weather Search</h1>
    <div class="search-input">
        <input type="text" style="width:80%" @bind="searchValue" />
        <button type="submit" @onclick="searchCity"> Search </button>
    </div>

    <div class="metric" style="margin-top: 20px; margin-bottom:20px;">
        <button type="reset" @onclick="toggleMetric">Celsius/Fahrenheit</button>
    </div>
    @if (data == null)
    {
        <p>Loading Data</p>
    }
    else
    {
        @if (found)
        {
            <div class="content">
                <h3>Weather in @data.name is @data.weather[0].main</h3>

                @if (metric)
                {
                    <p>Temperature: @returnCelsius(data.main.temp) C</p>
                    <p>Feels like: @returnCelsius(data.main.feels_like) C</p>
                }
                else
                {
                    <p>Temperature: @returnFahrenheit(data.main.temp) F</p>
                    <p>Feels like: @returnFahrenheit(data.main.feels_like) F</p>
                }

                <p>Humidity: @data.main.humidity</p>
                <p>Wind Speed: @data.wind.speed</p>
            </div>
        }
        else
        {
            <p>Error: @searchValue is not a city, please try again</p>
        }
    }
</div>

@code {
        private ca3Pages.Root data;
        public bool found;
        private bool metric = true;
        private string errorMessage;

        string searchValue = "";
        const string API_KEY = "b14c995566a1eb4fb31557124f720a82";

        private async Task GetWeatherAsync()
        {
            try
            {
                string uri = "https://api.openweathermap.org/data/2.5/weather?q=" + searchValue + "&appid=b14c995566a1eb4fb31557124f720a82";
                data = await Http.GetFromJsonAsync<ca3Pages.Root>(uri);
                found = true;
                errorMessage = String.Empty;
            }
            catch (Exception e)
            {
                found = false;
                errorMessage = e.Message;
            }
        }

        public void toggleMetric()
        {
            metric = !metric;
        }

        public double returnCelsius(double c)
        {
            double celsius =  c - 273.15;

            return Math.Round(celsius, 2);
        }

        public double returnFahrenheit(double f)
        {
            double fahrenheit = (1.8* (f - 273)) + 32;

            return Math.Round(fahrenheit, 2);
        }

        protected override async Task OnInitializedAsync()
        {
            await GetWeatherAsync();
        }

        public async void searchCity()
        {
            await GetWeatherAsync();
        }

    

}




